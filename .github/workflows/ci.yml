name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: Start MongoDB with Replica Set
        run: |
          # Start MongoDB with replica set configuration (no auth initially)
          docker run -d \
            --name mongodb \
            -p 27017:27017 \
            mongo:6.0 \
            mongod --replSet rs0 --bind_ip_all --noauth

          # Wait for MongoDB to start
          sleep 10

          # Check if container is running
          docker ps

          # Initialize replica set
          docker exec mongodb mongosh --eval "
            rs.initiate({
              _id: 'rs0',
              members: [{ _id: 0, host: 'localhost:27017' }]
            });
          "

          # Wait for replica set to be ready
          sleep 15

          # Create admin user
          docker exec mongodb mongosh admin --eval "
            db.createUser({
              user: 'admin',
              pwd: 'password',
              roles: [{ role: 'root', db: 'admin' }]
            });
          "

          # Verify replica set status
          docker exec mongodb mongosh --eval "rs.status()"

      - name: Install dependencies
        run: npm ci

      - name: Install React Shell dependencies
        run: |
          cd react-shell
          npm ci

      - name: Install Support App dependencies
        run: |
          cd support-app
          npm ci

      - name: Lint all code
        run: |
          # Run lint with zero warnings tolerance for CI
          npm run lint:ci

      - name: Generate Prisma Client
        run: |
          cd api
          npx prisma generate
        env:
          DATABASE_URL: mongodb://localhost:27017/flowbitai?replicaSet=rs0

      - name: Run database migrations
        run: |
          cd api
          npx prisma db push
        env:
          DATABASE_URL: mongodb://localhost:27017/flowbitai?replicaSet=rs0

      - name: Seed database
        run: |
          echo "Checking MongoDB status before seeding..."
          docker exec mongodb mongosh --eval "rs.status()"
          echo "Starting database seed..."
          npx tsx seed.ts
        env:
          DATABASE_URL: mongodb://localhost:27017/flowbitai?replicaSet=rs0

      - name: Start API Server
        run: |
          echo "Starting API server in background..."
          npm run start &
          API_PID=$!
          echo $API_PID > api-server.pid
          echo "API server started with PID: $API_PID"
          
          echo "Waiting for API server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/health >/dev/null 2>&1; then
              echo "API server is ready!"
              break
            fi
            echo "Attempt $i: API server not ready yet, waiting..."
            sleep 2
          done
          
          # Final check
          if ! curl -f http://localhost:3000/health; then
            echo "API server failed to start properly"
            exit 1
          fi
        env:
          DATABASE_URL: mongodb://localhost:27017/flowbitai?replicaSet=rs0
          JWT_SECRET: test-jwt-secret-key
          NODE_ENV: test
          WEBHOOK_SECRET: test-webhook-secret
          PORT: 3000

      - name: Run Jest tests
        run: npm test -- --coverage --watchAll=false
        env:
          DATABASE_URL: mongodb://localhost:27017/flowbitai?replicaSet=rs0
          JWT_SECRET: test-jwt-secret-key
          NODE_ENV: test
          WEBHOOK_SECRET: test-webhook-secret

      - name: Stop API Server
        if: always()
        run: |
          if [ -f api-server.pid ]; then
            kill $(cat api-server.pid) || true
            rm api-server.pid
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Cleanup MongoDB
        if: always()
        run: |
          docker stop mongodb || true
          docker rm mongodb || true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install React dependencies
        run: |
          cd react-shell && npm ci
          cd ../support-app && npm ci

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run Cypress E2E tests
        run: npm run cypress:run
        env:
          CYPRESS_BASE_URL: http://localhost:3001

      - name: Stop services
        run: docker-compose down

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
